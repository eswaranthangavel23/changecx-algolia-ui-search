var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "defaultTemplates", function () {
  return defaultTemplates;
});
var _preact = require('preact');
var _classnames = require('classnames');
var _classnamesDefault = _parcelHelpers.interopDefault(_classnames);
var _componentsRefinementListRefinementList = require('../../components/RefinementList/RefinementList');
var _componentsRefinementListRefinementListDefault = _parcelHelpers.interopDefault(_componentsRefinementListRefinementList);
var _connectorsRefinementListConnectRefinementList = require('../../connectors/refinement-list/connectRefinementList');
var _connectorsRefinementListConnectRefinementListDefault = _parcelHelpers.interopDefault(_connectorsRefinementListConnectRefinementList);
var _libUtils = require('../../lib/utils');
var _libSuit = require('../../lib/suit');
var _searchBoxDefaultTemplates = require('../search-box/defaultTemplates');
var _searchBoxDefaultTemplatesDefault = _parcelHelpers.interopDefault(_searchBoxDefaultTemplates);
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage = _libUtils.createDocumentationMessageGenerator({
  name: 'refinement-list'
});
var suit = _libSuit.component('RefinementList');
var searchBoxSuit = _libSuit.component('SearchBox');
var defaultTemplates = {
  item: "<label class=\"{{cssClasses.label}}\">\n  <input type=\"checkbox\"\n         class=\"{{cssClasses.checkbox}}\"\n         value=\"{{value}}\"\n         {{#isRefined}}checked{{/isRefined}} />\n  <span class=\"{{cssClasses.labelText}}\">{{#isFromSearch}}{{{highlighted}}}{{/isFromSearch}}{{^isFromSearch}}{{highlighted}}{{/isFromSearch}}</span>\n  <span class=\"{{cssClasses.count}}\">{{#helpers.formatNumber}}{{count}}{{/helpers.formatNumber}}</span>\n</label>",
  showMoreText: "\n    {{#isShowingMore}}\n      Show less\n    {{/isShowingMore}}\n    {{^isShowingMore}}\n      Show more\n    {{/isShowingMore}}\n    ",
  searchableNoResults: 'No results'
};
var renderer = function renderer(_ref) {
  var containerNode = _ref.containerNode, cssClasses = _ref.cssClasses, templates = _ref.templates, searchBoxTemplates = _ref.searchBoxTemplates, renderState = _ref.renderState, showMore = _ref.showMore, searchable = _ref.searchable, searchablePlaceholder = _ref.searchablePlaceholder, searchableIsAlwaysActive = _ref.searchableIsAlwaysActive;
  return function (_ref2, isFirstRendering) {
    var refine = _ref2.refine, items = _ref2.items, createURL = _ref2.createURL, searchForItems = _ref2.searchForItems, isFromSearch = _ref2.isFromSearch, instantSearchInstance = _ref2.instantSearchInstance, toggleShowMore = _ref2.toggleShowMore, isShowingMore = _ref2.isShowingMore, hasExhaustiveItems = _ref2.hasExhaustiveItems, canToggleShowMore = _ref2.canToggleShowMore;
    if (isFirstRendering) {
      renderState.templateProps = _libUtils.prepareTemplateProps({
        defaultTemplates: defaultTemplates,
        templatesConfig: instantSearchInstance.templatesConfig,
        templates: templates
      });
      renderState.searchBoxTemplateProps = _libUtils.prepareTemplateProps({
        defaultTemplates: _searchBoxDefaultTemplatesDefault.default,
        templatesConfig: instantSearchInstance.templatesConfig,
        templates: searchBoxTemplates
      });
      return;
    }
    _preact.render(_preact.h(_componentsRefinementListRefinementListDefault.default, {
      createURL: createURL,
      cssClasses: cssClasses,
      facetValues: items,
      templateProps: renderState.templateProps,
      searchBoxTemplateProps: renderState.searchBoxTemplateProps,
      toggleRefinement: refine,
      searchFacetValues: searchable ? searchForItems : undefined,
      searchPlaceholder: searchablePlaceholder,
      searchIsAlwaysActive: searchableIsAlwaysActive,
      isFromSearch: isFromSearch,
      showMore: showMore && !isFromSearch && items.length > 0,
      toggleShowMore: toggleShowMore,
      isShowingMore: isShowingMore,
      hasExhaustiveItems: hasExhaustiveItems,
      canToggleShowMore: canToggleShowMore
    }), containerNode);
  };
};
/**
* The refinement list widget is one of the most common widget that you can find
* in a search UI. With this widget, the user can filter the dataset based on facets.
*
* The refinement list displays only the most relevant facets for the current search
* context. The sort option only affects the facet that are returned by the engine,
* not which facets are returned.
*
* This widget also implements search for facet values, which is a mini search inside the
* values of the facets. This makes easy to deal with uncommon facet values.
*
* @requirements
*
* The attribute passed to `attribute` must be declared as an
* [attribute for faceting](https://www.algolia.com/doc/guides/searching/faceting/#declaring-attributes-for-faceting)
* in your Algolia settings.
*
* If you also want to use search for facet values on this attribute, you need to make it searchable using the [dashboard](https://www.algolia.com/explorer/display/) or using the [API](https://www.algolia.com/doc/guides/searching/faceting/#search-for-facet-values).
*/
var refinementList = function refinementList(widgetParams) {
  var _ref3 = widgetParams || ({}), container = _ref3.container, attribute = _ref3.attribute, operator = _ref3.operator, sortBy = _ref3.sortBy, limit = _ref3.limit, showMore = _ref3.showMore, showMoreLimit = _ref3.showMoreLimit, _ref3$searchable = _ref3.searchable, searchable = _ref3$searchable === void 0 ? false : _ref3$searchable, _ref3$searchablePlace = _ref3.searchablePlaceholder, searchablePlaceholder = _ref3$searchablePlace === void 0 ? 'Search...' : _ref3$searchablePlace, _ref3$searchableEscap = _ref3.searchableEscapeFacetValues, searchableEscapeFacetValues = _ref3$searchableEscap === void 0 ? true : _ref3$searchableEscap, _ref3$searchableIsAlw = _ref3.searchableIsAlwaysActive, searchableIsAlwaysActive = _ref3$searchableIsAlw === void 0 ? true : _ref3$searchableIsAlw, _ref3$cssClasses = _ref3.cssClasses, userCssClasses = _ref3$cssClasses === void 0 ? {} : _ref3$cssClasses, _ref3$templates = _ref3.templates, userTemplates = _ref3$templates === void 0 ? defaultTemplates : _ref3$templates, transformItems = _ref3.transformItems;
  if (!container) {
    throw new Error(withUsage('The `container` option is required.'));
  }
  var escapeFacetValues = searchable ? Boolean(searchableEscapeFacetValues) : false;
  var containerNode = _libUtils.getContainerNode(container);
  var cssClasses = {
    root: _classnamesDefault.default(suit(), userCssClasses.root),
    noRefinementRoot: _classnamesDefault.default(suit({
      modifierName: 'noRefinement'
    }), userCssClasses.noRefinementRoot),
    list: _classnamesDefault.default(suit({
      descendantName: 'list'
    }), userCssClasses.list),
    item: _classnamesDefault.default(suit({
      descendantName: 'item'
    }), userCssClasses.item),
    selectedItem: _classnamesDefault.default(suit({
      descendantName: 'item',
      modifierName: 'selected'
    }), userCssClasses.selectedItem),
    searchBox: _classnamesDefault.default(suit({
      descendantName: 'searchBox'
    }), userCssClasses.searchBox),
    label: _classnamesDefault.default(suit({
      descendantName: 'label'
    }), userCssClasses.label),
    checkbox: _classnamesDefault.default(suit({
      descendantName: 'checkbox'
    }), userCssClasses.checkbox),
    labelText: _classnamesDefault.default(suit({
      descendantName: 'labelText'
    }), userCssClasses.labelText),
    count: _classnamesDefault.default(suit({
      descendantName: 'count'
    }), userCssClasses.count),
    noResults: _classnamesDefault.default(suit({
      descendantName: 'noResults'
    }), userCssClasses.noResults),
    showMore: _classnamesDefault.default(suit({
      descendantName: 'showMore'
    }), userCssClasses.showMore),
    disabledShowMore: _classnamesDefault.default(suit({
      descendantName: 'showMore',
      modifierName: 'disabled'
    }), userCssClasses.disabledShowMore),
    searchable: {
      root: _classnamesDefault.default(searchBoxSuit(), userCssClasses.searchableRoot),
      form: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'form'
      }), userCssClasses.searchableForm),
      input: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'input'
      }), userCssClasses.searchableInput),
      submit: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'submit'
      }), userCssClasses.searchableSubmit),
      submitIcon: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'submitIcon'
      }), userCssClasses.searchableSubmitIcon),
      reset: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'reset'
      }), userCssClasses.searchableReset),
      resetIcon: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'resetIcon'
      }), userCssClasses.searchableResetIcon),
      loadingIndicator: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'loadingIndicator'
      }), userCssClasses.searchableLoadingIndicator),
      loadingIcon: _classnamesDefault.default(searchBoxSuit({
        descendantName: 'loadingIcon'
      }), userCssClasses.searchableLoadingIcon)
    }
  };
  var specializedRenderer = renderer({
    containerNode: containerNode,
    cssClasses: cssClasses,
    templates: userTemplates,
    searchBoxTemplates: {
      submit: userTemplates.searchableSubmit,
      reset: userTemplates.searchableReset,
      loadingIndicator: userTemplates.searchableLoadingIndicator
    },
    renderState: {},
    searchable: searchable,
    searchablePlaceholder: searchablePlaceholder,
    searchableIsAlwaysActive: searchableIsAlwaysActive,
    showMore: showMore
  });
  var makeWidget = _connectorsRefinementListConnectRefinementListDefault.default(specializedRenderer, function () {
    return _preact.render(null, containerNode);
  });
  return _objectSpread(_objectSpread({}, makeWidget({
    attribute: attribute,
    operator: operator,
    limit: limit,
    showMore: showMore,
    showMoreLimit: showMoreLimit,
    sortBy: sortBy,
    escapeFacetValues: escapeFacetValues,
    transformItems: transformItems
  })), {}, {
    $$widgetType: 'ais.refinementList'
  });
};
exports.default = refinementList;
