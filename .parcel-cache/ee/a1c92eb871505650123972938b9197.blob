var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _preact = require('preact');
var _classnames = require('classnames');
var _classnamesDefault = _parcelHelpers.interopDefault(_classnames);
var _libUtils = require('../../lib/utils');
var _libSuit = require('../../lib/suit');
var _componentsPanelPanel = require('../../components/Panel/Panel');
var _componentsPanelPanelDefault = _parcelHelpers.interopDefault(_componentsPanelPanel);
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage = _libUtils.createDocumentationMessageGenerator({
  name: 'panel'
});
var suit = _libSuit.component('Panel');
var renderer = function renderer(_ref) {
  var containerNode = _ref.containerNode, bodyContainerNode = _ref.bodyContainerNode, cssClasses = _ref.cssClasses, templates = _ref.templates;
  return function (_ref2) {
    var options = _ref2.options, hidden = _ref2.hidden, collapsible = _ref2.collapsible, collapsed = _ref2.collapsed;
    _preact.render(_preact.h(_componentsPanelPanelDefault.default, {
      cssClasses: cssClasses,
      hidden: hidden,
      collapsible: collapsible,
      isCollapsed: collapsed,
      templates: templates,
      data: options,
      bodyElement: bodyContainerNode
    }), containerNode);
  };
};
/**
* The panel widget wraps other widgets in a consistent panel design.
* It also reacts, indicates and sets CSS classes when widgets are no longer relevant for refining.
*/
var panel = function panel(panelWidgetParams) {
  var _ref3 = panelWidgetParams || ({}), _ref3$templates = _ref3.templates, templates = _ref3$templates === void 0 ? {} : _ref3$templates, _ref3$hidden = _ref3.hidden, hidden = _ref3$hidden === void 0 ? function () {
    return false;
  } : _ref3$hidden, collapsed = _ref3.collapsed, _ref3$cssClasses = _ref3.cssClasses, userCssClasses = _ref3$cssClasses === void 0 ? {} : _ref3$cssClasses;
  "development" === 'development' ? _libUtils.warning(typeof hidden === 'function', ("The `hidden` option in the \"panel\" widget expects a function returning a boolean (received type ").concat(_libUtils.getObjectType(hidden), ").")) : void 0;
  "development" === 'development' ? _libUtils.warning(typeof collapsed === 'undefined' || typeof collapsed === 'function', ("The `collapsed` option in the \"panel\" widget expects a function returning a boolean (received type ").concat(_libUtils.getObjectType(collapsed), ").")) : void 0;
  var bodyContainerNode = document.createElement('div');
  var collapsible = Boolean(collapsed);
  var collapsedFn = typeof collapsed === 'function' ? collapsed : function () {
    return false;
  };
  var cssClasses = {
    root: _classnamesDefault.default(suit(), userCssClasses.root),
    noRefinementRoot: _classnamesDefault.default(suit({
      modifierName: 'noRefinement'
    }), userCssClasses.noRefinementRoot),
    collapsibleRoot: _classnamesDefault.default(suit({
      modifierName: 'collapsible'
    }), userCssClasses.collapsibleRoot),
    collapsedRoot: _classnamesDefault.default(suit({
      modifierName: 'collapsed'
    }), userCssClasses.collapsedRoot),
    collapseButton: _classnamesDefault.default(suit({
      descendantName: 'collapseButton'
    }), userCssClasses.collapseButton),
    collapseIcon: _classnamesDefault.default(suit({
      descendantName: 'collapseIcon'
    }), userCssClasses.collapseIcon),
    body: _classnamesDefault.default(suit({
      descendantName: 'body'
    }), userCssClasses.body),
    header: _classnamesDefault.default(suit({
      descendantName: 'header'
    }), userCssClasses.header),
    footer: _classnamesDefault.default(suit({
      descendantName: 'footer'
    }), userCssClasses.footer)
  };
  return function (widgetFactory) {
    return function (widgetParams) {
      if (!(widgetParams && widgetParams.container)) {
        throw new Error(withUsage("The `container` option is required in the widget within the panel."));
      }
      var containerNode = _libUtils.getContainerNode(widgetParams.container);
      var defaultTemplates = {
        header: '',
        footer: '',
        collapseButtonText: function collapseButtonText(_ref4) {
          var isCollapsed = _ref4.collapsed;
          return ("<svg\n          class=\"").concat(cssClasses.collapseIcon, "\"\n          width=\"1em\"\n          height=\"1em\"\n          viewBox=\"0 0 500 500\"\n        >\n        <path d=\"").concat(isCollapsed ? 'M100 250l300-150v300z' : 'M250 400l150-300H100z', "\" fill=\"currentColor\" />\n        </svg>");
        }
      };
      var renderPanel = renderer({
        containerNode: containerNode,
        bodyContainerNode: bodyContainerNode,
        cssClasses: cssClasses,
        templates: _objectSpread(_objectSpread({}, defaultTemplates), templates)
      });
      renderPanel({
        options: {},
        hidden: true,
        collapsible: collapsible,
        collapsed: false
      });
      var widget = widgetFactory(_objectSpread(_objectSpread({}, widgetParams), {}, {
        container: bodyContainerNode
      }));
      // TypeScript somehow loses track of the ...widget type, since it's
      // not directly returned. Eventually the "as ReturnType<typeof widgetFactory>"
      // will not be needed anymore.
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      return _objectSpread(_objectSpread({}, widget), {}, {
        dispose: function dispose() {
          _preact.render(null, containerNode);
          if (typeof widget.dispose === 'function') {
            var _widget$dispose;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return (_widget$dispose = widget.dispose).call.apply(_widget$dispose, [this].concat(args));
          }
          return undefined;
        },
        render: function render() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          var renderOptions = args[0];
          var options = _objectSpread(_objectSpread({}, widget.getWidgetRenderState ? widget.getWidgetRenderState(renderOptions) : {}), renderOptions);
          renderPanel({
            options: options,
            hidden: Boolean(hidden(options)),
            collapsible: collapsible,
            collapsed: Boolean(collapsedFn(options))
          });
          if (typeof widget.render === 'function') {
            var _widget$render;
            (_widget$render = widget.render).call.apply(_widget$render, [this].concat(args));
          }
        }
      });
    };
  };
};
exports.default = panel;
