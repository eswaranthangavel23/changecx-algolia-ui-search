var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _preact = require('preact');
var _classnames = require('classnames');
var _classnamesDefault = _parcelHelpers.interopDefault(_classnames);
var _componentsPoweredByPoweredBy = require('../../components/PoweredBy/PoweredBy');
var _componentsPoweredByPoweredByDefault = _parcelHelpers.interopDefault(_componentsPoweredByPoweredBy);
var _connectorsPoweredByConnectPoweredBy = require('../../connectors/powered-by/connectPoweredBy');
var _connectorsPoweredByConnectPoweredByDefault = _parcelHelpers.interopDefault(_connectorsPoweredByConnectPoweredBy);
var _libUtils = require('../../lib/utils');
var _libSuit = require('../../lib/suit');
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var suit = _libSuit.component('PoweredBy');
var withUsage = _libUtils.createDocumentationMessageGenerator({
  name: 'powered-by'
});
var renderer = function renderer(_ref) {
  var containerNode = _ref.containerNode, cssClasses = _ref.cssClasses;
  return function (_ref2, isFirstRendering) {
    var url = _ref2.url, widgetParams = _ref2.widgetParams;
    if (isFirstRendering) {
      var theme = widgetParams.theme;
      _preact.render(_preact.h(_componentsPoweredByPoweredByDefault.default, {
        cssClasses: cssClasses,
        url: url,
        theme: theme
      }), containerNode);
      return;
    }
  };
};
function poweredBy(widgetParams) {
  var _ref3 = widgetParams || ({}), container = _ref3.container, _ref3$cssClasses = _ref3.cssClasses, userCssClasses = _ref3$cssClasses === void 0 ? {} : _ref3$cssClasses, _ref3$theme = _ref3.theme, theme = _ref3$theme === void 0 ? 'light' : _ref3$theme;
  if (!container) {
    throw new Error(withUsage('The `container` option is required.'));
  }
  var containerNode = _libUtils.getContainerNode(container);
  var cssClasses = {
    root: _classnamesDefault.default(suit(), suit({
      modifierName: theme === 'dark' ? 'dark' : 'light'
    }), userCssClasses.root),
    link: _classnamesDefault.default(suit({
      descendantName: 'link'
    }), userCssClasses.link),
    logo: _classnamesDefault.default(suit({
      descendantName: 'logo'
    }), userCssClasses.logo)
  };
  var specializedRenderer = renderer({
    containerNode: containerNode,
    cssClasses: cssClasses
  });
  var makeWidget = _connectorsPoweredByConnectPoweredByDefault.default(specializedRenderer, function () {
    return _preact.render(null, containerNode);
  });
  return _objectSpread(_objectSpread({}, makeWidget({
    theme: theme
  })), {}, {
    $$widgetType: 'ais.poweredBy'
  });
}
exports.default = poweredBy;
