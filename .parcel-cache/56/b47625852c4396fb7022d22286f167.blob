var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _preact = require('preact');
var _classnames = require('classnames');
var _classnamesDefault = _parcelHelpers.interopDefault(_classnames);
var _libUtils = require('../../lib/utils');
var _libSuit = require('../../lib/suit');
var _connectorsSearchBoxConnectSearchBox = require('../../connectors/search-box/connectSearchBox');
var _connectorsSearchBoxConnectSearchBoxDefault = _parcelHelpers.interopDefault(_connectorsSearchBoxConnectSearchBox);
var _componentsSearchBoxSearchBox = require('../../components/SearchBox/SearchBox');
var _componentsSearchBoxSearchBoxDefault = _parcelHelpers.interopDefault(_componentsSearchBoxSearchBox);
var _defaultTemplates = require('./defaultTemplates');
var _defaultTemplatesDefault = _parcelHelpers.interopDefault(_defaultTemplates);
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage = _libUtils.createDocumentationMessageGenerator({
  name: 'search-box'
});
var suit = _libSuit.component('SearchBox');
var renderer = function renderer(_ref) {
  var containerNode = _ref.containerNode, cssClasses = _ref.cssClasses, placeholder = _ref.placeholder, templates = _ref.templates, autofocus = _ref.autofocus, searchAsYouType = _ref.searchAsYouType, showReset = _ref.showReset, showSubmit = _ref.showSubmit, showLoadingIndicator = _ref.showLoadingIndicator;
  return function (_ref2) {
    var refine = _ref2.refine, query = _ref2.query, isSearchStalled = _ref2.isSearchStalled;
    _preact.render(_preact.h(_componentsSearchBoxSearchBoxDefault.default, {
      query: query,
      placeholder: placeholder,
      autofocus: autofocus,
      refine: refine,
      searchAsYouType: searchAsYouType,
      templates: templates,
      showSubmit: showSubmit,
      showReset: showReset,
      showLoadingIndicator: showLoadingIndicator,
      isSearchStalled: isSearchStalled,
      cssClasses: cssClasses
    }), containerNode);
  };
};
/**
* The searchbox widget is used to let the user set a text based query.
*
* This is usually the  main entry point to start the search in an instantsearch context. For that
* reason is usually placed on top, and not hidden so that the user can start searching right
* away.
*
*/
var searchBox = function searchBox(widgetParams) {
  var _ref3 = widgetParams || ({}), container = _ref3.container, _ref3$placeholder = _ref3.placeholder, placeholder = _ref3$placeholder === void 0 ? '' : _ref3$placeholder, _ref3$cssClasses = _ref3.cssClasses, userCssClasses = _ref3$cssClasses === void 0 ? {} : _ref3$cssClasses, _ref3$autofocus = _ref3.autofocus, autofocus = _ref3$autofocus === void 0 ? false : _ref3$autofocus, _ref3$searchAsYouType = _ref3.searchAsYouType, searchAsYouType = _ref3$searchAsYouType === void 0 ? true : _ref3$searchAsYouType, _ref3$showReset = _ref3.showReset, showReset = _ref3$showReset === void 0 ? true : _ref3$showReset, _ref3$showSubmit = _ref3.showSubmit, showSubmit = _ref3$showSubmit === void 0 ? true : _ref3$showSubmit, _ref3$showLoadingIndi = _ref3.showLoadingIndicator, showLoadingIndicator = _ref3$showLoadingIndi === void 0 ? true : _ref3$showLoadingIndi, queryHook = _ref3.queryHook, templates = _ref3.templates;
  if (!container) {
    throw new Error(withUsage('The `container` option is required.'));
  }
  var containerNode = _libUtils.getContainerNode(container);
  var cssClasses = {
    root: _classnamesDefault.default(suit(), userCssClasses.root),
    form: _classnamesDefault.default(suit({
      descendantName: 'form'
    }), userCssClasses.form),
    input: _classnamesDefault.default(suit({
      descendantName: 'input'
    }), userCssClasses.input),
    submit: _classnamesDefault.default(suit({
      descendantName: 'submit'
    }), userCssClasses.submit),
    submitIcon: _classnamesDefault.default(suit({
      descendantName: 'submitIcon'
    }), userCssClasses.submitIcon),
    reset: _classnamesDefault.default(suit({
      descendantName: 'reset'
    }), userCssClasses.reset),
    resetIcon: _classnamesDefault.default(suit({
      descendantName: 'resetIcon'
    }), userCssClasses.resetIcon),
    loadingIndicator: _classnamesDefault.default(suit({
      descendantName: 'loadingIndicator'
    }), userCssClasses.loadingIndicator),
    loadingIcon: _classnamesDefault.default(suit({
      descendantName: 'loadingIcon'
    }), userCssClasses.loadingIcon)
  };
  var specializedRenderer = renderer({
    containerNode: containerNode,
    cssClasses: cssClasses,
    placeholder: placeholder,
    templates: _objectSpread(_objectSpread({}, _defaultTemplatesDefault.default), templates),
    autofocus: autofocus,
    searchAsYouType: searchAsYouType,
    showReset: showReset,
    showSubmit: showSubmit,
    showLoadingIndicator: showLoadingIndicator
  });
  var makeWidget = _connectorsSearchBoxConnectSearchBoxDefault.default(specializedRenderer, function () {
    return _preact.render(null, containerNode);
  });
  return _objectSpread(_objectSpread({}, makeWidget({
    queryHook: queryHook
  })), {}, {
    $$widgetType: 'ais.searchBox'
  });
};
exports.default = searchBox;
