var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _preact = require('preact');
var _classnames = require('classnames');
var _classnamesDefault = _parcelHelpers.interopDefault(_classnames);
var _TemplateTemplate = require('../Template/Template');
var _TemplateTemplateDefault = _parcelHelpers.interopDefault(_TemplateTemplate);
var _GeoSearchButton = require('./GeoSearchButton');
var _GeoSearchButtonDefault = _parcelHelpers.interopDefault(_GeoSearchButton);
var _GeoSearchToggle = require('./GeoSearchToggle');
var _GeoSearchToggleDefault = _parcelHelpers.interopDefault(_GeoSearchToggle);
function _extends() {
  _extends = Object.assign || (function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  });
  return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var GeoSearchControls = function GeoSearchControls(_ref) {
  var cssClasses = _ref.cssClasses, enableRefine = _ref.enableRefine, enableRefineControl = _ref.enableRefineControl, enableClearMapRefinement = _ref.enableClearMapRefinement, isRefineOnMapMove = _ref.isRefineOnMapMove, isRefinedWithMap = _ref.isRefinedWithMap, hasMapMoveSinceLastRefine = _ref.hasMapMoveSinceLastRefine, onRefineToggle = _ref.onRefineToggle, onRefineClick = _ref.onRefineClick, onClearClick = _ref.onClearClick, templateProps = _ref.templateProps;
  return enableRefine && _preact.h("div", null, enableRefineControl && _preact.h("div", {
    className: cssClasses.control
  }, isRefineOnMapMove || !hasMapMoveSinceLastRefine ? _preact.h(_GeoSearchToggleDefault.default, {
    classNameLabel: _classnamesDefault.default(cssClasses.label, _defineProperty({}, cssClasses.selectedLabel, isRefineOnMapMove)),
    classNameInput: cssClasses.input,
    checked: isRefineOnMapMove,
    onToggle: onRefineToggle
  }, _preact.h(_TemplateTemplateDefault.default, _extends({}, templateProps, {
    templateKey: "toggle",
    rootTagName: "span"
  }))) : _preact.h(_GeoSearchButtonDefault.default, {
    className: cssClasses.redo,
    disabled: !hasMapMoveSinceLastRefine,
    onClick: onRefineClick
  }, _preact.h(_TemplateTemplateDefault.default, _extends({}, templateProps, {
    templateKey: "redo",
    rootTagName: "span"
  })))), !enableRefineControl && !isRefineOnMapMove && _preact.h("div", {
    className: cssClasses.control
  }, _preact.h(_GeoSearchButtonDefault.default, {
    className: _classnamesDefault.default(cssClasses.redo, _defineProperty({}, cssClasses.disabledRedo, !hasMapMoveSinceLastRefine)),
    disabled: !hasMapMoveSinceLastRefine,
    onClick: onRefineClick
  }, _preact.h(_TemplateTemplateDefault.default, _extends({}, templateProps, {
    templateKey: "redo",
    rootTagName: "span"
  })))), enableClearMapRefinement && isRefinedWithMap && _preact.h(_GeoSearchButtonDefault.default, {
    className: cssClasses.reset,
    onClick: onClearClick
  }, _preact.h(_TemplateTemplateDefault.default, _extends({}, templateProps, {
    templateKey: "reset",
    rootTagName: "span"
  }))));
};
exports.default = GeoSearchControls;
